---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}



~> The existing `filters` attribute will be deprecated, and a new `pack_filters` attribute will be introduced for advanced search functionality.

## Example Usage


An example of how to use this data source to retrieve a specific pack from the community registry.

```hcl
# Retrieve details of a specific pack using name and version
data "spectrocloud_pack" "example" {
  name    = "nginx-pack" # Pack name (e.g., "nginx-pack", "k8s-core", "monitoring-stack")
  version = "1.2.3"      # Pack version (e.g., "1.2.3", "latest", "stable")
}

# Retrieve a pack using advanced filters
data "spectrocloud_pack" "filtered" {
  name = "k8sgpt-operator" # Pack name to search for

  advance_filters {
    pack_type   = ["spectro"]       # Allowed: "helm", "spectro", "oci", "manifest"
    addon_type  = ["system app"]    # Allowed: "load balancer", "ingress", "logging", "monitoring", "security", "authentication", "servicemesh", "system app", "app services", "registry", "csi", "cni", "integration"
    pack_layer  = ["addon"]         # Allowed: "kernel", "os", "k8s", "cni", "csi", "addon"
    environment = ["all"]           # Allowed: "all", "aws", "eks", "azure", "aks", "gcp", "gke", "vsphere", "maas", "openstack", "edge-native"
    is_fips     = false             # Boolean: true (FIPS-compliant) / false (default)
    pack_source = ["community"]      # Allowed: "spectrocloud", "community"
  }

  registry_uid = "5ee9c5adc172449eeb9c30cf" # Unique registry identifier
}

# Output pack details
output "pack_id" {
  value = data.spectrocloud_pack.example.id # Returns the unique pack ID
}

output "pack_version" {
  value = data.spectrocloud_pack.example.version # Returns the pack version
}

output "pack_values" {
  value = data.spectrocloud_pack.example.values # Returns the YAML values of the pack
}
```


In this example, a filter is applied to retrieve a Calico CNI pack from the Palette OCI registry that is compatible with Edge clusters and has a version greater than 3.26.9.

-> The filter attribute is a string that can contain multiple filters separated by the `AND`, `OR` operator. You can filter for a pack by using the attributes retured in the `spec` object of the payload provided by the `v1/packs/search` endpoint.
Refer to the Palette Pack Search API endpoint [documentation](https://docs.spectrocloud.com/api/v1/v-1-packs-search/) for more information on the available filters.



```hcl
data "spectrocloud_registry" "palette_registry_oci" {
  name = "Palette Registry"
}


data "spectrocloud_pack" "cni" {
  filters = "spec.cloudTypes=edge-nativeANDspec.layer=cniANDspec.displayName=CalicoANDspec.version>3.26.9ANDspec.registryUid=${data.spectrocloud_registry.palette_registry_oci.id}"
}
```

{{ .SchemaMarkdown | trimspace }}
