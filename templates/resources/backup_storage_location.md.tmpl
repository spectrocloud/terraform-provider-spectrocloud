---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}

## Example Usage


```terraform
resource "spectrocloud_backup_storage_location" "bsl1" {
  name        = "dev-backup-s3"
  context     = "tenant"
  is_default  = false
  region      = "us-east-2"
  bucket_name = "dev-backup"
  s3 {
    credential_type     = var.credential_type
    access_key          = var.aws_access_key
    secret_key          = var.aws_secret_key
    s3_force_path_style = false

    #s3_url             = "http://10.90.78.23"
  }
}

resource "spectrocloud_backup_storage_location" "bsl2" {
  name        = "prod-backup-s3"
  is_default  = false
  region      = "us-east-2"
  bucket_name = "prod-backup"
  s3 {
    credential_type     = var.credential_type
    arn                 = var.arn
    external_id         = var.external_id
    s3_force_path_style = false
    #s3_url             = "http://10.90.78.23"
  }
}
```

## Import

Backup Storage Locations can be imported using either a simple ID format or with explicit context specification. This resource supports both project and tenant contexts.

### Simple Import (defaults to project context)

```bash
terraform import spectrocloud_backup_storage_location.example <bsl_id>:project
```

### Context-specific Import

```bash
terraform import spectrocloud_backup_storage_location.example <bsl_id>:project
terraform import spectrocloud_backup_storage_location.example <bsl_id>:tenant
```

Where:
- `<bsl_id>` is the Backup Storage Location ID
- `project` or `tenant` specifies the context where the backup storage location exists

**Import behavior:**
- If no context is specified, it defaults to `project` context
- If the resource is not found in the specified context, the import will automatically try the other context
- The import will automatically populate all configuration fields from the Spectro Cloud API, including the correct context, storage provider, and all provider-specific settings

After import, you can run `terraform plan` to see the current configuration and make any necessary adjustments.


{{ .SchemaMarkdown | trimspace }}